{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","clickPad","e","play","target","children","keyPad","document","getElementById","code","split","id","currentTime","setState","display","src","match","err","console","log","updateDescription","state","addEventListener","this","className","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,8HC+E5BC,G,8DA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGRC,SAAW,SAACC,GACV,EAAKC,KAAKD,EAAEE,OAAOC,SAAS,KALX,EAOnBC,OAAS,SAACJ,GACR,EAAKC,KAAKI,SAASC,eAAeN,EAAEO,KAAKC,MAAM,OAAO,MARrC,EAUnBP,KAAO,SAACQ,GACN,IACEA,EAAGC,YAAc,EACjBD,EAAGR,OAEH,EAAKU,SAAS,CACZC,QAASH,EAAGI,IAAIC,MAAM,aAAa,GAAGN,MAAM,KAAK,KAEnD,MAAOO,GACPC,QAAQC,IAAIF,KAnBG,EAsBnBG,kBAAoB,SAACT,KApBnB,EAAKU,MAAQ,CAAEP,QAAS,IAFP,E,gEAwBjBP,SAASe,iBAAiB,UAAWC,KAAKjB,U,+BAI1C,OACE,yBAAKkB,UAAU,OACb,yBAAKb,GAAG,gBACN,6BACE,yBAAKa,UAAU,MAAMb,GAAG,iBACtB,yBAAKA,GAAG,WAAWY,KAAKF,MAAMP,UAEhC,yBAAKU,UAAU,OACb,yBAAKA,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,QACnD,2BAAOI,IAAI,WAAWS,UAAU,OAAOb,GAAG,MAD5C,KAGA,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,QACnD,2BAAOI,IAAI,WAAWS,UAAU,OAAOb,GAAG,MAD5C,KAEO,IACP,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,QACnD,2BAAOI,IAAI,WAAWS,UAAU,OAAOb,GAAG,MAD5C,KAEO,KAET,yBAAKa,UAAU,OACb,yBAAKA,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,SACnD,2BAAOI,IAAI,YAAYS,UAAU,OAAOb,GAAG,MAD7C,KAEO,IACP,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,OACnD,2BAAOI,IAAI,UAAUS,UAAU,OAAOb,GAAG,MAD3C,KAEO,IACP,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,OACnD,2BAAOI,IAAI,UAAUS,UAAU,OAAOb,GAAG,MAD3C,KAEO,KAET,yBAAKa,UAAU,OACb,yBAAKA,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,QACnD,2BAAOI,IAAI,WAAWS,UAAU,OAAOb,GAAG,MAD5C,KAEO,IACP,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,QACnD,2BAAOI,IAAI,WAAWS,UAAU,OAAOb,GAAG,MAD5C,KAEO,IACP,yBAAKa,UAAU,WAAWC,QAASF,KAAKtB,SAAUU,GAAG,SACnD,2BAAOI,IAAI,YAAYS,UAAU,OAAOb,GAAG,MAD7C,QAMN,yBAAKA,GAAG,gB,GAvEEe,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.f47e32c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { display: \"\" };\n  }\n  clickPad = (e) => {\n    this.play(e.target.children[0]);\n  };\n  keyPad = (e) => {\n    this.play(document.getElementById(e.code.split(\"Key\")[1]));\n  };\n  play = (id) => {\n    try {\n      id.currentTime = 0;\n      id.play();\n      // get the file name, using regex, split the extension and only pass the filename\n      this.setState({\n        display: id.src.match(/\\w+.wav/gi)[0].split(\".\")[0],\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  updateDescription = (id) => {};\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyPad);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"drum-machine\">\n          <div>\n            <div className=\"row\" id=\"raise-display\">\n              <div id=\"display\">{this.state.display}</div>\n            </div>\n            <div className=\"row\">\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"tom1\">\n                <audio src=\"tom1.wav\" className=\"clip\" id=\"Q\"></audio>Q\n              </div>\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"tom2\">\n                <audio src=\"tom2.wav\" className=\"clip\" id=\"W\"></audio>W\n              </div>{\" \"}\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"tom3\">\n                <audio src=\"tom3.wav\" className=\"clip\" id=\"E\"></audio>E\n              </div>{\" \"}\n            </div>\n            <div className=\"row\">\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"crash\">\n                <audio src=\"crash.wav\" className=\"clip\" id=\"A\"></audio>A\n              </div>{\" \"}\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"hho\">\n                <audio src=\"hho.wav\" className=\"clip\" id=\"S\"></audio>S\n              </div>{\" \"}\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"hhc\">\n                <audio src=\"hhc.wav\" className=\"clip\" id=\"D\"></audio>D\n              </div>{\" \"}\n            </div>\n            <div className=\"row\">\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"clap\">\n                <audio src=\"clap.wav\" className=\"clip\" id=\"Z\"></audio>Z\n              </div>{\" \"}\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"kick\">\n                <audio src=\"kick.wav\" className=\"clip\" id=\"X\"></audio>X\n              </div>{\" \"}\n              <div className=\"drum-pad\" onClick={this.clickPad} id=\"snare\">\n                <audio src=\"snare.wav\" className=\"clip\" id=\"C\"></audio>C\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id=\"bottom\"></div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}